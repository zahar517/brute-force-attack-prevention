// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BFAPToolClient is the client API for BFAPTool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BFAPToolClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ResetBuket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bFAPToolClient struct {
	cc grpc.ClientConnInterface
}

func NewBFAPToolClient(cc grpc.ClientConnInterface) BFAPToolClient {
	return &bFAPToolClient{cc}
}

func (c *bFAPToolClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/BFAPTool.BFAPTool/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFAPToolClient) ResetBuket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BFAPTool.BFAPTool/ResetBuket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFAPToolClient) AddToBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BFAPTool.BFAPTool/AddToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFAPToolClient) RemoveFromBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BFAPTool.BFAPTool/RemoveFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFAPToolClient) AddToWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BFAPTool.BFAPTool/AddToWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFAPToolClient) RemoveFromWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BFAPTool.BFAPTool/RemoveFromWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BFAPToolServer is the server API for BFAPTool service.
// All implementations must embed UnimplementedBFAPToolServer
// for forward compatibility
type BFAPToolServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ResetBuket(context.Context, *ResetBucketRequest) (*emptypb.Empty, error)
	AddToBlacklist(context.Context, *SubnetRequest) (*emptypb.Empty, error)
	RemoveFromBlacklist(context.Context, *SubnetRequest) (*emptypb.Empty, error)
	AddToWhitelist(context.Context, *SubnetRequest) (*emptypb.Empty, error)
	RemoveFromWhitelist(context.Context, *SubnetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBFAPToolServer()
}

// UnimplementedBFAPToolServer must be embedded to have forward compatible implementations.
type UnimplementedBFAPToolServer struct {
}

func (UnimplementedBFAPToolServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBFAPToolServer) ResetBuket(context.Context, *ResetBucketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBuket not implemented")
}
func (UnimplementedBFAPToolServer) AddToBlacklist(context.Context, *SubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedBFAPToolServer) RemoveFromBlacklist(context.Context, *SubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedBFAPToolServer) AddToWhitelist(context.Context, *SubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedBFAPToolServer) RemoveFromWhitelist(context.Context, *SubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelist not implemented")
}
func (UnimplementedBFAPToolServer) mustEmbedUnimplementedBFAPToolServer() {}

// UnsafeBFAPToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BFAPToolServer will
// result in compilation errors.
type UnsafeBFAPToolServer interface {
	mustEmbedUnimplementedBFAPToolServer()
}

func RegisterBFAPToolServer(s grpc.ServiceRegistrar, srv BFAPToolServer) {
	s.RegisterService(&BFAPTool_ServiceDesc, srv)
}

func _BFAPTool_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFAPToolServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFAPTool.BFAPTool/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFAPToolServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFAPTool_ResetBuket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFAPToolServer).ResetBuket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFAPTool.BFAPTool/ResetBuket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFAPToolServer).ResetBuket(ctx, req.(*ResetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFAPTool_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFAPToolServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFAPTool.BFAPTool/AddToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFAPToolServer).AddToBlacklist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFAPTool_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFAPToolServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFAPTool.BFAPTool/RemoveFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFAPToolServer).RemoveFromBlacklist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFAPTool_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFAPToolServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFAPTool.BFAPTool/AddToWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFAPToolServer).AddToWhitelist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFAPTool_RemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFAPToolServer).RemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFAPTool.BFAPTool/RemoveFromWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFAPToolServer).RemoveFromWhitelist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BFAPTool_ServiceDesc is the grpc.ServiceDesc for BFAPTool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BFAPTool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BFAPTool.BFAPTool",
	HandlerType: (*BFAPToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _BFAPTool_Login_Handler,
		},
		{
			MethodName: "ResetBuket",
			Handler:    _BFAPTool_ResetBuket_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _BFAPTool_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _BFAPTool_RemoveFromBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _BFAPTool_AddToWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromWhitelist",
			Handler:    _BFAPTool_RemoveFromWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BFAPTool.proto",
}
